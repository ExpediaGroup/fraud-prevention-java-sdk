/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.expediagroup.sdk.fraudpreventionv2.models

import com.expediagroup.sdk.core.model.exception.client.PropertyConstraintViolationException
import com.expediagroup.sdk.fraudpreventionv2.models.CancellationReason
import com.expediagroup.sdk.fraudpreventionv2.models.OrderPurchaseUpdateRequest
import com.expediagroup.sdk.fraudpreventionv2.models.Status
import com.expediagroup.sdk.fraudpreventionv2.models.UpdateType
import com.fasterxml.jackson.annotation.JsonProperty
import org.hibernate.validator.constraints.Length
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator
import javax.validation.Valid
import javax.validation.Validation
import javax.validation.constraints.NotNull

/**
 * Order related data that should be updated.
 * @param orderStatus
 * @param acquirerReferenceNumber A unique number that tags a credit or debit card transaction when it goes from the merchant's bank through to the cardholder's bank. `acquirer_reference_number` is a required field only if `order_status` = `COMPLETED` Typically, merchants can get this number from their payment processors. This number is used when dealing with disputes/chargebacks on original transactions.
 * @param cancellationReason
 */
data class OrderUpdate(
    // The `risk_id` provided by Expedia's Fraud Prevention Service in the `OrderPurchaseScreenResponse`.
    @JsonProperty("risk_id")
    @field:Length(max = 200)
    @field:NotNull
    @field:Valid
    override val riskId: kotlin.String,
    @JsonProperty("order_status")
    @field:NotNull
    @field:Valid
    val orderStatus: Status,
    // A unique number that tags a credit or debit card transaction when it goes from the merchant's bank through to the cardholder's bank. `acquirer_reference_number` is a required field only if `order_status` = `COMPLETED` Typically, merchants can get this number from their payment processors. This number is used when dealing with disputes/chargebacks on original transactions.
    @JsonProperty("acquirer_reference_number")
    @field:Length(max = 200)
    @field:Valid
    val acquirerReferenceNumber: kotlin.String? = null,
    @JsonProperty("cancellation_reason")
    @field:Valid
    val cancellationReason: CancellationReason? = null
) : OrderPurchaseUpdateRequest {
    @JsonProperty("type")
    override val type: UpdateType = UpdateType.ORDER_UPDATE

    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var riskId: kotlin.String? = null,
        private var orderStatus: Status? = null,
        private var acquirerReferenceNumber: kotlin.String? = null,
        private var cancellationReason: CancellationReason? = null
    ) {
        fun riskId(riskId: kotlin.String) = apply { this.riskId = riskId }

        fun orderStatus(orderStatus: Status) = apply { this.orderStatus = orderStatus }

        fun acquirerReferenceNumber(acquirerReferenceNumber: kotlin.String?) = apply { this.acquirerReferenceNumber = acquirerReferenceNumber }

        fun cancellationReason(cancellationReason: CancellationReason?) = apply { this.cancellationReason = cancellationReason }

        fun build(): OrderUpdate {
            val instance =
                OrderUpdate(
                    riskId = riskId!!,
                    orderStatus = orderStatus!!,
                    acquirerReferenceNumber = acquirerReferenceNumber,
                    cancellationReason = cancellationReason
                )

            validate(instance)

            return instance
        }

        private fun validate(instance: OrderUpdate) {
            val validator =
                Validation
                    .byDefaultProvider()
                    .configure()
                    .messageInterpolator(ParameterMessageInterpolator())
                    .buildValidatorFactory()
                    .validator

            val violations = validator.validate(instance)

            if (violations.isNotEmpty()) {
                throw PropertyConstraintViolationException(
                    constraintViolations = violations.map { "${it.propertyPath}: ${it.message}" }
                )
            }
        }
    }

    fun toBuilder() =
        Builder(
            riskId = riskId!!,
            orderStatus = orderStatus!!,
            acquirerReferenceNumber = acquirerReferenceNumber,
            cancellationReason = cancellationReason
        )
}
