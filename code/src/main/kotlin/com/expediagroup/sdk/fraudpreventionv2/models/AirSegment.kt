/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.expediagroup.sdk.fraudpreventionv2.models

import com.expediagroup.sdk.core.model.exception.client.PropertyConstraintViolationException
import com.fasterxml.jackson.annotation.JsonProperty
import org.hibernate.validator.constraints.Length
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator
import javax.validation.Valid
import javax.validation.Validation
import javax.validation.constraints.NotNull

/**
 *
 * @param airlineCode Airline code of the trip segment
 * @param departureAirportCode Departure airport of the trip segment
 * @param arrivalAirportCode Arrival airport of the trip segment
 * @param departureTime Local date and time of departure from departure location, in ISO-8601 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`.
 * @param arrivalTime Local date and time of arrival to destination location, in ISO-8601 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`.
 */
data class AirSegment(
    // Airline code of the trip segment
    @JsonProperty("airline_code")
    @field:Length(max = 10)
    @field:NotNull
    @field:Valid
    val airlineCode: kotlin.String,
    // Departure airport of the trip segment
    @JsonProperty("departure_airport_code")
    @field:Length(max = 10)
    @field:NotNull
    @field:Valid
    val departureAirportCode: kotlin.String,
    // Arrival airport of the trip segment
    @JsonProperty("arrival_airport_code")
    @field:Length(max = 10)
    @field:NotNull
    @field:Valid
    val arrivalAirportCode: kotlin.String,
    // Local date and time of departure from departure location, in ISO-8601 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`.
    @JsonProperty("departure_time")
    val departureTime: java.time.OffsetDateTime? = null,
    // Local date and time of arrival to destination location, in ISO-8601 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`.
    @JsonProperty("arrival_time")
    val arrivalTime: java.time.OffsetDateTime? = null
) {
    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var airlineCode: kotlin.String? = null,
        private var departureAirportCode: kotlin.String? = null,
        private var arrivalAirportCode: kotlin.String? = null,
        private var departureTime: java.time.OffsetDateTime? = null,
        private var arrivalTime: java.time.OffsetDateTime? = null
    ) {
        fun airlineCode(airlineCode: kotlin.String) = apply { this.airlineCode = airlineCode }

        fun departureAirportCode(departureAirportCode: kotlin.String) = apply { this.departureAirportCode = departureAirportCode }

        fun arrivalAirportCode(arrivalAirportCode: kotlin.String) = apply { this.arrivalAirportCode = arrivalAirportCode }

        fun departureTime(departureTime: java.time.OffsetDateTime?) = apply { this.departureTime = departureTime }

        fun arrivalTime(arrivalTime: java.time.OffsetDateTime?) = apply { this.arrivalTime = arrivalTime }

        fun build(): AirSegment {
            val instance =
                AirSegment(
                    airlineCode = airlineCode!!,
                    departureAirportCode = departureAirportCode!!,
                    arrivalAirportCode = arrivalAirportCode!!,
                    departureTime = departureTime,
                    arrivalTime = arrivalTime
                )

            validate(instance)

            return instance
        }

        private fun validate(instance: AirSegment) {
            val validator =
                Validation
                    .byDefaultProvider()
                    .configure()
                    .messageInterpolator(ParameterMessageInterpolator())
                    .buildValidatorFactory()
                    .validator

            val violations = validator.validate(instance)

            if (violations.isNotEmpty()) {
                throw PropertyConstraintViolationException(
                    constraintViolations = violations.map { "${it.propertyPath}: ${it.message}" }
                )
            }
        }
    }

    fun toBuilder() =
        Builder(
            airlineCode = airlineCode!!,
            departureAirportCode = departureAirportCode!!,
            arrivalAirportCode = arrivalAirportCode!!,
            departureTime = departureTime,
            arrivalTime = arrivalTime
        )
}
