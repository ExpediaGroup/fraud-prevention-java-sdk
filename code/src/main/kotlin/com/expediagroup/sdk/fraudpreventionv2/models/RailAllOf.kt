/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.expediagroup.sdk.fraudpreventionv2.models

import com.expediagroup.sdk.core.model.exception.client.PropertyConstraintViolationException
import com.expediagroup.sdk.fraudpreventionv2.models.RailSegments
import com.fasterxml.jackson.annotation.JsonProperty
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator
import javax.validation.Valid
import javax.validation.Validation
import javax.validation.constraints.NotNull
import javax.validation.constraints.Size

/**
 *
 * @param routeType The type of route or itinerary for the Rail product, indicating the travel arrangement and pattern. Possible values are: - `MULTIPLE_DESTINATIONS` - The Rail product includes multiple destinations in its itinerary. - `ONE_WAY` - The Rail product represents a one-way journey. - `ROUNDTRIP` - The Rail product represents a roundtrip journey.
 * @param railSegments
 */
data class RailAllOf(
    // The type of route or itinerary for the Rail product, indicating the travel arrangement and pattern. Possible values are: - `MULTIPLE_DESTINATIONS` - The Rail product includes multiple destinations in its itinerary. - `ONE_WAY` - The Rail product represents a one-way journey. - `ROUNDTRIP` - The Rail product represents a roundtrip journey.
    @JsonProperty("route_type")
    @field:NotNull
    val routeType: RailAllOf.RouteType,
    @JsonProperty("rail_segments")
    @field:Size(min = 1, max = 20)
    @field:NotNull
    @field:Valid
    val railSegments: kotlin.collections
        .List<
            RailSegments
        >
) {
    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var routeType: RailAllOf.RouteType? = null,
        private var railSegments: kotlin.collections.List<RailSegments>? = null
    ) {
        fun routeType(routeType: RailAllOf.RouteType) = apply { this.routeType = routeType }

        fun railSegments(railSegments: kotlin.collections.List<RailSegments>) = apply { this.railSegments = railSegments }

        fun build(): RailAllOf {
            val instance =
                RailAllOf(
                    routeType = routeType!!,
                    railSegments = railSegments!!
                )

            validate(instance)

            return instance
        }

        private fun validate(instance: RailAllOf) {
            val validator =
                Validation
                    .byDefaultProvider()
                    .configure()
                    .messageInterpolator(ParameterMessageInterpolator())
                    .buildValidatorFactory()
                    .validator

            val violations = validator.validate(instance)

            if (violations.isNotEmpty()) {
                throw PropertyConstraintViolationException(
                    constraintViolations = violations.map { "${it.propertyPath}: ${it.message}" }
                )
            }
        }
    }

    fun toBuilder() =
        Builder(
            routeType = routeType!!,
            railSegments = railSegments!!
        )

    /**
     * The type of route or itinerary for the Rail product, indicating the travel arrangement and pattern. Possible values are: - `MULTIPLE_DESTINATIONS` - The Rail product includes multiple destinations in its itinerary. - `ONE_WAY` - The Rail product represents a one-way journey. - `ROUNDTRIP` - The Rail product represents a roundtrip journey.
     * Values: MULTIPLE_DESTINATIONS,ONE_WAY,ROUND_TRIP
     */
    enum class RouteType(val value: kotlin.String) {
        @JsonProperty("MULTIPLE_DESTINATIONS")
        MULTIPLE_DESTINATIONS("MULTIPLE_DESTINATIONS"),

        @JsonProperty("ONE_WAY")
        ONE_WAY("ONE_WAY"),

        @JsonProperty("ROUND_TRIP")
        ROUND_TRIP("ROUND_TRIP")
    }
}
