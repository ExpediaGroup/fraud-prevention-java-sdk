/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.expediagroup.sdk.fraudpreventionv2.models

import com.expediagroup.sdk.core.model.exception.client.PropertyConstraintViolationException
import com.expediagroup.sdk.fraudpreventionv2.models.Telephone
import com.fasterxml.jackson.annotation.JsonProperty
import org.hibernate.validator.constraints.Length
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator
import javax.validation.Valid
import javax.validation.Validation
import javax.validation.constraints.NotNull
import javax.validation.constraints.Size

/**
 *
 * @param bankId The bank_id provided by the internet bank payment(IBP) provider (DRWP aka NetGiro) for the bank used for processing the payment.
 * @param bankBranchCode A code that identifies the bank branch for internet bank payment(IBP).
 * @param telephones Telephone(s) associated with internet bank payment(IBP) provider.
 */
data class InternetBankPaymentAllOf(
    // The bank_id provided by the internet bank payment(IBP) provider (DRWP aka NetGiro) for the bank used for processing the payment.
    @JsonProperty("bank_id")
    @field:Length(max = 15)
    @field:NotNull
    @field:Valid
    val bankId: kotlin.String,
    // A code that identifies the bank branch for internet bank payment(IBP).
    @JsonProperty("bank_branch_code")
    @field:Length(max = 15)
    @field:NotNull
    @field:Valid
    val bankBranchCode: kotlin.String,
    // Telephone(s) associated with internet bank payment(IBP) provider.
    @JsonProperty("telephones")
    @field:Size(min = 1, max = 20)
    @field:NotNull
    @field:Valid
    val telephones: kotlin.collections
        .List<
            Telephone
        >
) {
    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var bankId: kotlin.String? = null,
        private var bankBranchCode: kotlin.String? = null,
        private var telephones: kotlin.collections.List<Telephone>? = null
    ) {
        fun bankId(bankId: kotlin.String) = apply { this.bankId = bankId }

        fun bankBranchCode(bankBranchCode: kotlin.String) = apply { this.bankBranchCode = bankBranchCode }

        fun telephones(telephones: kotlin.collections.List<Telephone>) = apply { this.telephones = telephones }

        fun build(): InternetBankPaymentAllOf {
            val instance =
                InternetBankPaymentAllOf(
                    bankId = bankId!!,
                    bankBranchCode = bankBranchCode!!,
                    telephones = telephones!!
                )

            validate(instance)

            return instance
        }

        private fun validate(instance: InternetBankPaymentAllOf) {
            val validator =
                Validation
                    .byDefaultProvider()
                    .configure()
                    .messageInterpolator(ParameterMessageInterpolator())
                    .buildValidatorFactory()
                    .validator

            val violations = validator.validate(instance)

            if (violations.isNotEmpty()) {
                throw PropertyConstraintViolationException(
                    constraintViolations = violations.map { "${it.propertyPath}: ${it.message}" }
                )
            }
        }
    }

    fun toBuilder() =
        Builder(
            bankId = bankId!!,
            bankBranchCode = bankBranchCode!!,
            telephones = telephones!!
        )
}
