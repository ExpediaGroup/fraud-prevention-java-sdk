/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.expediagroup.sdk.fraudpreventionv2.models

import com.expediagroup.sdk.core.model.exception.client.PropertyConstraintViolationException
import com.fasterxml.jackson.annotation.JsonProperty
import org.hibernate.validator.constraints.Length
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator
import javax.validation.Valid
import javax.validation.Validation
import javax.validation.constraints.NotNull

/**
 * Third party payment provider details
 * @param payerName Payer Name from card/bank account.
 * @param lastFourDigits Last four digits of card/account number.
 * @param paymentType Payment type,e.g. card, bank, etc.
 * @param extensions
 */
data class ThirdPartyProviderDetails(
    // Payer Name from card/bank account.
    @JsonProperty("payer_name")
    @field:Length(max = 200)
    @field:NotNull
    @field:Valid
    val payerName: kotlin.String,
    // Last four digits of card/account number.
    @JsonProperty("last_four_digits")
    @field:Length(max = 4)
    @field:NotNull
    @field:Valid
    val lastFourDigits: kotlin.String,
    // Payment type,e.g. card, bank, etc.
    @JsonProperty("payment_type")
    @field:Length(max = 200)
    @field:Valid
    val paymentType: kotlin.String? = null,
    @JsonProperty("extensions")
    @field:Valid
    val extensions: kotlin.collections.Map<kotlin.String, kotlin.String>? = null
) {
    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var payerName: kotlin.String? = null,
        private var lastFourDigits: kotlin.String? = null,
        private var paymentType: kotlin.String? = null,
        private var extensions: kotlin.collections.Map<kotlin.String, kotlin.String>? = null
    ) {
        fun payerName(payerName: kotlin.String) = apply { this.payerName = payerName }

        fun lastFourDigits(lastFourDigits: kotlin.String) = apply { this.lastFourDigits = lastFourDigits }

        fun paymentType(paymentType: kotlin.String?) = apply { this.paymentType = paymentType }

        fun extensions(extensions: kotlin.collections.Map<kotlin.String, kotlin.String>?) = apply { this.extensions = extensions }

        fun build(): ThirdPartyProviderDetails {
            val instance =
                ThirdPartyProviderDetails(
                    payerName = payerName!!,
                    lastFourDigits = lastFourDigits!!,
                    paymentType = paymentType,
                    extensions = extensions
                )

            validate(instance)

            return instance
        }

        private fun validate(instance: ThirdPartyProviderDetails) {
            val validator =
                Validation
                    .byDefaultProvider()
                    .configure()
                    .messageInterpolator(ParameterMessageInterpolator())
                    .buildValidatorFactory()
                    .validator

            val violations = validator.validate(instance)

            if (violations.isNotEmpty()) {
                throw PropertyConstraintViolationException(
                    constraintViolations = violations.map { "${it.propertyPath}: ${it.message}" }
                )
            }
        }
    }

    fun toBuilder() =
        Builder(
            payerName = payerName!!,
            lastFourDigits = lastFourDigits!!,
            paymentType = paymentType,
            extensions = extensions
        )
}
