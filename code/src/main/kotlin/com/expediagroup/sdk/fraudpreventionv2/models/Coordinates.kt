/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.expediagroup.sdk.fraudpreventionv2.models

import com.expediagroup.sdk.core.model.exception.client.PropertyConstraintViolationException
import com.fasterxml.jackson.annotation.JsonProperty
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator
import javax.validation.Validation

/**
 * This field signifies the precise geographical coordinates denoting the location of the activity.
 * @param latitude The latitude in degrees. It must be in the range [-90.0, +90.0].
 * @param longitude The longitude in degrees. It must be in the range [-180.0, +180.0].
 */
data class Coordinates(
    // The latitude in degrees. It must be in the range [-90.0, +90.0].
    @JsonProperty("latitude")
    val latitude: kotlin.Double,
    // The longitude in degrees. It must be in the range [-180.0, +180.0].
    @JsonProperty("longitude")
    val longitude: kotlin.Double
) {
    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var latitude: kotlin.Double? = null,
        private var longitude: kotlin.Double? = null
    ) {
        fun latitude(latitude: kotlin.Double) = apply { this.latitude = latitude }

        fun longitude(longitude: kotlin.Double) = apply { this.longitude = longitude }

        fun build(): Coordinates {
            val instance =
                Coordinates(
                    latitude = latitude!!,
                    longitude = longitude!!
                )

            validate(instance)

            return instance
        }

        private fun validate(instance: Coordinates) {
            val validator =
                Validation
                    .byDefaultProvider()
                    .configure()
                    .messageInterpolator(ParameterMessageInterpolator())
                    .buildValidatorFactory()
                    .validator

            val violations = validator.validate(instance)

            if (violations.isNotEmpty()) {
                throw PropertyConstraintViolationException(
                    constraintViolations = violations.map { "${it.propertyPath}: ${it.message}" }
                )
            }
        }
    }

    fun toBuilder() =
        Builder(
            latitude = latitude!!,
            longitude = longitude!!
        )
}
